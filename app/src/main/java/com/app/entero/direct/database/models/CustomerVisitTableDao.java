package com.app.entero.direct.database.models;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "customer_visit_plan".
*/
public class CustomerVisitTableDao extends AbstractDao<CustomerVisitTable, Long> {

    public static final String TABLENAME = "customer_visit_plan";

    /**
     * Properties of entity CustomerVisitTable.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ChemistID = new Property(1, String.class, "ChemistID", false, "ChemistID");
        public final static Property StokistID = new Property(2, String.class, "StokistID", false, "StokistID");
        public final static Property UserID = new Property(3, String.class, "UserID", false, "UserID");
        public final static Property RouteID = new Property(4, String.class, "RouteID", false, "RouteID");
        public final static Property Chemist_Legal_Name = new Property(5, String.class, "Chemist_Legal_Name", false, "Chemist_Legal_Name");
        public final static Property Address = new Property(6, String.class, "Address", false, "Address");
        public final static Property MobileNo = new Property(7, String.class, "MobileNo", false, "MobileNo");
        public final static Property Email = new Property(8, String.class, "Email", false, "Email");
        public final static Property City = new Property(9, String.class, "City", false, "City");
        public final static Property ChemistERPCode = new Property(10, String.class, "ChemistERPCode", false, "ChemistERPCode");
        public final static Property TotalAmt = new Property(11, String.class, "TotalAmt", false, "TotalAmt");
        public final static Property OutstandingAmt = new Property(12, String.class, "OutstandingAmt", false, "OutstandingAmt");
    }


    public CustomerVisitTableDao(DaoConfig config) {
        super(config);
    }
    
    public CustomerVisitTableDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"customer_visit_plan\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ChemistID\" TEXT," + // 1: ChemistID
                "\"StokistID\" TEXT," + // 2: StokistID
                "\"UserID\" TEXT," + // 3: UserID
                "\"RouteID\" TEXT," + // 4: RouteID
                "\"Chemist_Legal_Name\" TEXT," + // 5: Chemist_Legal_Name
                "\"Address\" TEXT," + // 6: Address
                "\"MobileNo\" TEXT," + // 7: MobileNo
                "\"Email\" TEXT," + // 8: Email
                "\"City\" TEXT," + // 9: City
                "\"ChemistERPCode\" TEXT," + // 10: ChemistERPCode
                "\"TotalAmt\" TEXT," + // 11: TotalAmt
                "\"OutstandingAmt\" TEXT);"); // 12: OutstandingAmt
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"customer_visit_plan\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CustomerVisitTable entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String ChemistID = entity.getChemistID();
        if (ChemistID != null) {
            stmt.bindString(2, ChemistID);
        }
 
        String StokistID = entity.getStokistID();
        if (StokistID != null) {
            stmt.bindString(3, StokistID);
        }
 
        String UserID = entity.getUserID();
        if (UserID != null) {
            stmt.bindString(4, UserID);
        }
 
        String RouteID = entity.getRouteID();
        if (RouteID != null) {
            stmt.bindString(5, RouteID);
        }
 
        String Chemist_Legal_Name = entity.getChemist_Legal_Name();
        if (Chemist_Legal_Name != null) {
            stmt.bindString(6, Chemist_Legal_Name);
        }
 
        String Address = entity.getAddress();
        if (Address != null) {
            stmt.bindString(7, Address);
        }
 
        String MobileNo = entity.getMobileNo();
        if (MobileNo != null) {
            stmt.bindString(8, MobileNo);
        }
 
        String Email = entity.getEmail();
        if (Email != null) {
            stmt.bindString(9, Email);
        }
 
        String City = entity.getCity();
        if (City != null) {
            stmt.bindString(10, City);
        }
 
        String ChemistERPCode = entity.getChemistERPCode();
        if (ChemistERPCode != null) {
            stmt.bindString(11, ChemistERPCode);
        }
 
        String TotalAmt = entity.getTotalAmt();
        if (TotalAmt != null) {
            stmt.bindString(12, TotalAmt);
        }
 
        String OutstandingAmt = entity.getOutstandingAmt();
        if (OutstandingAmt != null) {
            stmt.bindString(13, OutstandingAmt);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CustomerVisitTable entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String ChemistID = entity.getChemistID();
        if (ChemistID != null) {
            stmt.bindString(2, ChemistID);
        }
 
        String StokistID = entity.getStokistID();
        if (StokistID != null) {
            stmt.bindString(3, StokistID);
        }
 
        String UserID = entity.getUserID();
        if (UserID != null) {
            stmt.bindString(4, UserID);
        }
 
        String RouteID = entity.getRouteID();
        if (RouteID != null) {
            stmt.bindString(5, RouteID);
        }
 
        String Chemist_Legal_Name = entity.getChemist_Legal_Name();
        if (Chemist_Legal_Name != null) {
            stmt.bindString(6, Chemist_Legal_Name);
        }
 
        String Address = entity.getAddress();
        if (Address != null) {
            stmt.bindString(7, Address);
        }
 
        String MobileNo = entity.getMobileNo();
        if (MobileNo != null) {
            stmt.bindString(8, MobileNo);
        }
 
        String Email = entity.getEmail();
        if (Email != null) {
            stmt.bindString(9, Email);
        }
 
        String City = entity.getCity();
        if (City != null) {
            stmt.bindString(10, City);
        }
 
        String ChemistERPCode = entity.getChemistERPCode();
        if (ChemistERPCode != null) {
            stmt.bindString(11, ChemistERPCode);
        }
 
        String TotalAmt = entity.getTotalAmt();
        if (TotalAmt != null) {
            stmt.bindString(12, TotalAmt);
        }
 
        String OutstandingAmt = entity.getOutstandingAmt();
        if (OutstandingAmt != null) {
            stmt.bindString(13, OutstandingAmt);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CustomerVisitTable readEntity(Cursor cursor, int offset) {
        CustomerVisitTable entity = new CustomerVisitTable( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // ChemistID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // StokistID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // UserID
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // RouteID
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // Chemist_Legal_Name
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // Address
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // MobileNo
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // Email
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // City
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // ChemistERPCode
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // TotalAmt
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // OutstandingAmt
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CustomerVisitTable entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setChemistID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStokistID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserID(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRouteID(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setChemist_Legal_Name(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAddress(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMobileNo(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setEmail(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCity(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setChemistERPCode(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setTotalAmt(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setOutstandingAmt(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CustomerVisitTable entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CustomerVisitTable entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CustomerVisitTable entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
